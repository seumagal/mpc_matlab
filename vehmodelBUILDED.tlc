%% File : vehmodelBUILDED.tlc
%% Created: Tue Sep 18 07:19:33 2018
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "vehmodelBUILDED.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  vehmodelBUILDED "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void vehmodelBUILDED_Outputs_wrapper(const real_T *inSteer,
			const real_T *inMz,
			real_T *outFz,
			real_T *outFy,
			real_T *outFx,
			real_T *outSlip,
			real_T *outStates,
			real_T *outDStates,
			const real_T *xD,
			const real_T *xC,
			const real_T  *params, const int_T  p_width0);
  extern void vehmodelBUILDED_Update_wrapper(const real_T *inSteer,
			const real_T *inMz,
			const real_T *outFz,
			const real_T *outFy,
			const real_T *outFx,
			const real_T *outSlip,
			const real_T *outStates,
			const real_T *outDStates,
			real_T *xD,
			const real_T  *params,  const int_T  p_width0);
  extern void vehmodelBUILDED_Derivatives_wrapper(const real_T *inSteer,
			const real_T *inMz,
			const real_T *outFz,
			const real_T *outFy,
			const real_T *outFx,
			const real_T *outSlip,
			const real_T *outStates,
			const real_T *outDStates,
			real_T *dx,
			real_T *xC,
			const real_T  *params,  const int_T  p_width0);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  {

   real_T initVector[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   %assign rollVars = ["<dwork>/DSTATE"]
   %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
   %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
     %if %<LibBlockDWorkWidth(DSTATE)> == 1
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
      %else
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
      %endif
   %endroll
  }
  { 
   real_T *xC   = &%<LibBlockContinuousState("", "", 0)>;
   
   
    xC[0] =  0;
    xC[1] =  80/3.6;
    xC[2] =  0;
    xC[3] =  0;
    xC[4] =  0;
  }
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    vehmodelBUILDED_Outputs_wrapper(%<pu0>, %<pu1>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>,  %<pxd>,  pxc, %<pp1>, %<param_width1>);

  }  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%     
%%
%function Update(block, system) Output
    /* S-Function "vehmodelBUILDED_wrapper" Block: %<Name> */
  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0) 
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  
   
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
 
  vehmodelBUILDED_Update_wrapper(%<pu0>, %<pu1>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<pxd>, %<pp1>, %<param_width1>);
  

  %%
%endfunction 
%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "vehmodelBUILDED_wrapper" Block: %<Name> */  

  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1    
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1) 
  %else    
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  
 
  
 { 
   real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
   real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
   vehmodelBUILDED_Derivatives_wrapper(%<pu0>, %<pu1>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, dx, pxc, %<pp1>, %<param_width1>);
  }
  %%
%endfunction 
%% [EOF] vehmodelBUILDED.tlc





